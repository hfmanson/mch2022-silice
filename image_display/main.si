// @sylefeb 2020
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

/*

Uses ESP32 - FPGA SPI communication module to retrive an image
from a file and display it on screen.

*/

// 30 MHz clock
import('../common/ext/icebrkr_30.v')
// ESP32 SPI file interface
import('../common/spi_file.v')
append('../common/ext/spi_dev_core.v')
append('../common/ext/spi_dev_proto.v')
append('../common/ext/spi_dev_fread.v')
append('../common/ext/ram_sdp.v')
// LCD screen
$include('../common/lcd.si')

// Main (top) design
unit main(
  output uint3 leds,
  output uint8 lcd_d,
  output uint1 lcd_rs,
  output uint1 lcd_wr_n,
  output uint1 lcd_cs_n(0),
  output uint1 lcd_rst_n(1),
  input  uint1 lcd_mode,
  input  uint1 lcd_fmark,
  input  uint1 espspi_mosi,
  output uint1 espspi_miso,
  input  uint1 espspi_clk,
  input  uint1 espspi_cs_n,
  output uint1 espirq_n,
) <@clock_pll> {
  // ^^^^ design uses a PLL generated clock
  //                    vvv
  uint1 clock_pll = uninitialized;
  pll pllgen(
    clock_in  <: clock,
    clock_out :> clock_pll,
  );

  // screen driver
  lcd_driver lcd(<:auto:>);
  //             ^^^^^^^^ use autobinding for the pins

  // ESP32 SPI file interface
  spi_file sf(
    clk      <: clock_pll,
    resetq   <: reset,
    spi_mosi <: espspi_mosi,
    spi_miso :> espspi_miso,
    spi_clk  <: espspi_clk,
    spi_cs_n <: espspi_cs_n,
    irq_n    :> espirq_n,
  );

  // vars
  uint11 file_recv_count(0);
  bram   uint8 pixels[1024] = uninitialized;
  uint7  iter(0);
  uint11 n(0);

  always_before {
    lcd.valid              = 0;
    sf.file_request_valid  = 0;
    // the file offset is always given by the iteration counter
    sf.file_request_offset = {iter,10b0};
    // if data is received, store in BRAM
    pixels.wdata      = sf.file_data;
    pixels.wenable    = sf.file_data_avail;
    if (sf.file_data_avail) {
      pixels.addr     = file_recv_count[0,10];
      file_recv_count = file_recv_count + 1;
    }
  }

  algorithm {

    // wait for screen to be ready
    while (~lcd.ready) { }

    // transfer takes 75 iterations:
    while (iter != 75) {
      // one byte per pixel, 320x240, 1024 pixels at each iteration
      // request some data from the file
      leds = 1;
      while (1) {
        sf.file_request_valid = ~sf.file_request_ready; // start!
        // wait for SPI file interface to report ready
        if (sf.file_request_ready) {
          break;
        }
      }
      leds = 2;
      // wait for all data to be received
      while (~file_recv_count[10,1]) { } // == 1024
      leds = 0;
      // send to screen
      n = 0;
      pixels.wenable = 0;
      pixels.addr = 0;
      while (~n[10,1]) {
        uint5  r     = pixels.rdata[3,5];
        uint6  g     = pixels.rdata[2,6];
        uint5  b     = pixels.rdata[3,5];
        uint16 clr   = {g[0,3],r,b,g[3,3]};
        uint8  clr_l = clr[0,8];
        uint8  clr_h = clr[8,8];
        // each pixel is two bytes
        lcd.data  = clr_l;
        lcd.valid = 1;
    ++: // wait one cycle before sending second byte
        lcd.data  = clr_h;
        lcd.valid = 1;
        // next pixel
        n           = n + 1;
        pixels.addr = n;
      }
      // next iteration
      file_recv_count = 0;
      iter = iter + 1;
    }

  }

}
