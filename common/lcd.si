// @sylefeb 2022
// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice

import('../common/ice40_sb_io.v')
import('../common/ice40_sb_io_ddr.v')

// wrapper around single bit sb_io primitive
unit sb_io_n(input auto o,output sameas(o) p)
{
  $$for i=0,widthof('o')-1 do
  sb_io _(clock <: clock, out <: o[$i$,1], pin :> p[$i$,1]);
  $$end
}

// For ILI9341, parallel screen interface
unit parallel_screen(
  input   uint1 start,    input  uint1 data_or_command, input  uint8 byte,
  output  uint8 screen_d, output uint1 screen_dc, output uint1 screen_wrn
) {
  uint1 scr_trigger(1);
  uint8 scr_byte(0);
  uint1 scr_dc(0);
  uint1 high(1);
  // sends data through DDR, so one byte can be sent every cycle (fast!)
  sb_io_ddr _(clock <: clock, out_0 <: scr_trigger, out_1 <: high, pin :> screen_wrn);
  sb_io_n   _(o                     <: scr_byte,    p   :> screen_d);
  sb_io     _(clock <: clock, out   <: scr_dc,      pin :> screen_dc);
  always {
    scr_byte    =  byte;
    scr_dc      =  data_or_command;
    scr_trigger = ~start;
  }
}

// Piece of circuitry repeated to send a byte to the screen
circuitry lcd_write(input byte, input cmd_else_dta)
{
  screen.byte = byte;
  screen.data_or_command = ~cmd_else_dta;
  screen.start = 1;
++: // wait one cycle
}

// Unit to drive the LCD
unit lcd_driver(
  output uint8  lcd_d,
  output uint1  lcd_rs,
  output uint1  lcd_wr_n,
  output uint1  lcd_cs_n(0),
  output uint1  lcd_rst_n(1),
  input  uint1  lcd_mode,
  input  uint1  lcd_fmark,
  output uint1  ready(0),
  input  uint1  valid(0),
  input  uint8  data,
) {

  // screen interface
  parallel_screen screen(
    screen_d :> lcd_d, screen_dc :> lcd_rs, screen_wrn :> lcd_wr_n
  );

  lcd_rst_n    := 1;
  lcd_cs_n     := 0;

  algorithm <autorun> {

    // a subroutine to wait a long time
    subroutine wait()
    {
      uint20 count = 1;
      while (count != 0) { count = count + 1; }
    }

    while (~lcd_mode) { }

    // NOTE: if done efficiently, the sequence below would normally be
    // encoded in a small BRAM with a compact design going through the BRAM
    // and sending in sequence with lcd_write. However, I am here using
    // Silice prototyping features for convenience.

    () = lcd_write(8h01,1b1);
    () <- wait <- ();

    () = lcd_write(8h11,1b1);
    () <- wait <- ();

    () = lcd_write(8h3a,1b1);
    () = lcd_write(8h55,1b0);
    () <- wait <- ();

    () = lcd_write(8h36,1b1);
    () = lcd_write(8h00,1b0);

    () = lcd_write(8h13,1b1);
    () <- wait <- ();

    () = lcd_write(8h29,1b1);
    () <- wait <- ();

    () = lcd_write(8h2b,1b1);
    () = lcd_write(8h00,1b0);
    () = lcd_write(8h00,1b0);
    () = lcd_write(8h01,1b0);
    () = lcd_write(8h3f,1b0);

    () = lcd_write(8h2a,1b1);
    () = lcd_write(8h00,1b0);
    () = lcd_write(8h00,1b0);
    () = lcd_write(8h00,1b0);
    () = lcd_write(8hef,1b0);

    () = lcd_write(8h51,1b1);
    () = lcd_write(8h00,1b0);

    () = lcd_write(8h2c,1b1);

    while (1) {
      ready        = 1;
      screen.byte  = data;
      screen.data_or_command = 1;
      screen.start = valid;
    }
  }
}
