// @sylefeb 2020
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

/*

Simple LCD initialization and drawing test.

*/

// LCD screen controller
$include('../common/lcd.si')

// Main (top) design
unit main(
  output uint3 leds,
  output uint8 lcd_d,
  output uint1 lcd_rs,
  output uint1 lcd_wr_n,
  output uint1 lcd_cs_n(0),
  output uint1 lcd_rst_n(1),
  input  uint1 lcd_mode,
  input  uint1 lcd_fmark,
) {

  lcd_driver lcd(<:auto:>);
  //             ^^^^^^^^ use autobinding for the pins

  lcd.valid := 0; // pulse to send

  algorithm {

    uint9 x(0);
    uint8 y(0);

    // wait for screen to be ready
    while (~lcd.ready) { }

    // we forever generate a simple pattern on screen
    while (1) {
      x = 0;
      while (x != 320) {
        y = 0;
        while (y != 240) {
          uint5  r    <:: x[1,5];
          uint6  g    <:: y[0,6];
          uint5  b    <:: 0;
          uint16 clr  <:: {g[0,3],r,b,g[3,3]};
          uint8  clr_l <: clr[0,8];
          uint8  clr_h <: clr[8,8];
          // each pixel is two bytes
          lcd.data  = clr_l;
          lcd.valid = 1;
      ++: // wait one cycle before sending second byte
          lcd.data  = clr_h;
          lcd.valid = 1;
          // next pixel
          y         = y + 1;
        }
        x = x + 1;
      }
    }  // while (1)

  }

}
