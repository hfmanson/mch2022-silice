// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice
// @sylefeb 2022

// include the screen driver
$include('../common/lcd.si')
// PLL
import('../common/icebrkr_25.v')

// CPU declaration
riscv cpu_drawer(output uint32 rgb,        // send a pixel (RGB 24 bits)
                 output uint1  on_rgb,     // pulses high when CPU writes rgb
                 output uint32 leds,       // set on-board LEDs
                 output uint1  on_leds,    // pulses high when CPU writes leds
                 input  uint32 ready,      // true when screen is ready
                ) <
                  mem=4096,
                  core="ice-v-dual", // dual core please
                  ICEV_FAST_SHIFT=1, // fast shifts (barrel shifter)
                  ICEV_ALU_LATCH=1,  // improves fmax by latching ALU mux
                  O=3                // compile with -O3
                > {

  // =============== firmware in C language ===========================
  #define FIRE_W 64 //_ 320 / 5
  #define FIRE_H 48 //_ 240 / 5

  //_ framebuffer: we run at low resolution since this code has to fit entirely
  //               in BRAM (for full res we'd have to use the UP5K SPRAM)
  unsigned char tbl[FIRE_W*FIRE_H + 8];
  //                                ^ padding

  //_ 32x 6bits RGB entries ('fire' palette)
  unsigned char pal[] = {
   0,0x01,0x01,0x01,   0,0x07,0x01,0x01,   0,0x0b,0x03,0x01,   0,0x11,0x03,0x01,
   0,0x15,0x05,0x01,   0,0x19,0x07,0x01,   0,0x1d,0x07,0x01,   0,0x27,0x0b,0x01,
   0,0x2b,0x0f,0x01,   0,0x2f,0x11,0x01,   0,0x31,0x11,0x01,   0,0x37,0x15,0x01,
   0,0x37,0x15,0x01,   0,0x35,0x17,0x01,   0,0x35,0x17,0x01,   0,0x35,0x19,0x03,
   0,0x33,0x1d,0x03,   0,0x33,0x1f,0x03,   0,0x33,0x21,0x05,   0,0x31,0x21,0x05,
   0,0x31,0x25,0x07,   0,0x2f,0x27,0x07,   0,0x2f,0x27,0x07,   0,0x2f,0x29,0x09,
   0,0x2f,0x29,0x09,   0,0x2f,0x2b,0x0b,   0,0x2d,0x2b,0x0b,   0,0x2d,0x2d,0x0b,
   0,0x33,0x33,0x1b,   0,0x37,0x37,0x27,   0,0x3b,0x3b,0x31,   0,0x3f,0x3f,0x3f};

  //_ draws fire onto the LCD
  void draw_fire()
  {
    while (1) {
      for (int u=0;u<FIRE_W;u++) {
        // send each column 5 times
        for (int su=0;su<5;++su) {
          unsigned char *col = tbl + u;
          for (int v=0;v<FIRE_H;++v) {
            // palette lookup
            int clr  = ((*col)>>2)&31;
            col     += FIRE_W;
            int *ptr = ((int*)pal) + clr;
            // send each pixel 5 times
            for (int sv=0;sv<5;++sv) {
              rgb(*ptr);
            }
          }
        }
      }
    }
  }

  //_ update the fire framebuffer
  void update_fire()
  {
    int rng  = 31421;  // random number generator seed
    while (1) {
      // move up
      unsigned char *below   = tbl;
      unsigned char *current = tbl + FIRE_W;
      for ( ; current < tbl + FIRE_W*FIRE_H ; ++current ) {
        int clr = 0;
        if ((*below) > 1) {
          clr = (*below)-(rng&7);
          if (clr < 0) clr = 0;
        }
        rng = (rng<<3) + ((rng>>3) ^ (int)current);
        *(current + (rng&3)) = clr; // NOTE: table padding avoids
                                    //       out of bounds access
        ++ below;
      }
      // keep the heat on
      unsigned char *ptr = tbl;
      for (int v=0;v<FIRE_W;v++) {
        rng = (rng<<5) + ((rng>>5) ^ (int)ptr);
        (*ptr++) = 120 + (rng&7);
      }
    }
  }

  //_ C main
  void main() {
    leds(0);
    while (ready() == 0) {} // wait for ready signal
    if (core_id() == 0) {
      draw_fire();
    } else {
      update_fire();
    }
  }

  // =============== end of firmware ==================================
}

// now we are creating the hardware hosting the CPU
unit main(
  output uint3 leds,
  output uint8 lcd_d,
  output uint1 lcd_rs,
  output uint1 lcd_wr_n,
  output uint1 lcd_cs_n(0),
  output uint1 lcd_rst_n(1),
  input  uint1 lcd_mode,
  input  uint1 lcd_fmark,
) <@clock_pll> {
  // ^^^^ design uses a PLL generated clock
  //                    vvv
  uint1 clock_pll = uninitialized;
  pll pllgen(
    clock_in  <: clock,
    clock_out :> clock_pll,
  );

  // screen driver
  lcd_driver lcd(<:auto:>);
  //                        ^^^^^^^^ use autobinding for the pins

  // instantiates our CPU as defined above
  cpu_drawer cpu;

  // interface for sending a full pixel
  uint16 pix_data(0);             // RGB 16bits to send
  uint2  pix_sending(2b00);       // sending? (11 => 01 => 00 done)

  always {
    // can we send the next byte if any is pending?
    uint1 can_send <:: pix_sending[0,1] & :lcd.ready;
    // track LEDs
    leds          = cpu.leds;
    // track screen ready
    cpu.ready     = {32{lcd.ready}};
    // send to screen when possible
    lcd.valid     = can_send;
    lcd.data      = pix_data[0,8];
    // track CPU writes to rgb output
    if (cpu.on_rgb) {
      // CPU requests RGB write
      // grab pixel data (convert RGB 24 bits to 16 bits)
      uint5  r     <: cpu.rgb[ 9, 5];
      uint6  g     <: cpu.rgb[16, 6];
      uint5  b     <: cpu.rgb[25, 5];
      pix_data    = {g[0,3],r,b,g[3,3]};
      // initiate sending
      pix_sending = 2b11;
    } else {
      // if we can send, shift to next
      pix_data    = can_send ? pix_data>>8    : pix_data;
      pix_sending = can_send ? pix_sending>>1 : pix_sending;
    }
  }

}
